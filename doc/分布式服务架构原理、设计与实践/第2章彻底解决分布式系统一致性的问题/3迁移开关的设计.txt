还有系统将开关配置在中心化的配置系统、数据库或者缓存等中，处理的每个请求都通过统一的开关来判断是否迁移。这有一个致命的缺点：
在服务请求的处理过程中，开关可能会有变化，各个节点之间的开关可能不同步、不一致，导致重复的请求可能既走到新逻辑又走到老逻辑，如果新逻辑和老逻辑没有保证
幂等，则这个请求就被重复处理了。

这里推荐使用订单开关，不管我们在什么维度上设计了开关，在接收到服务请求后，在请求创建的关联实体上标记开关，对于以后的处理流程，包括同步的和异步的处理流
程，都通过订单上的开关来判断，而不是通过全局的或者基于配置的开关来判断，这样在订单创建时，开关已经确定，不再变更，若一份数据不再发生变化，那么他永远是
并发安全的，并且不会有不一致的问题。