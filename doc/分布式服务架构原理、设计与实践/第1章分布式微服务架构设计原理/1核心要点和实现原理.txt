1、微服务的分解和组合模式：
	服务代理模式：根据业务的需要选择调用后端的某个服务，在返回给使用端之前，代理可以对后端服务的输出进行加工，也可以直接把后端服务的返回结果返回给
	使用端
	服务聚合模式
	服务串联模式
	服务分支模式：是服务代理模式、服务聚合模式、服务串联模式相结合的产物
	服务异步消息模式
	服务共享数据模式：其实是反模式，然而，在下面两种场景下，我们仍然需要数据共享模式：
		1、单元化架构：一些平台对性能要求比较高，所以采用微服务化将服务进行拆分，通过网络服务进行通信，尽管网络通信的带宽已经很宽，但是还会有性能
		方面的损耗，在这种场景下，可以让不同的微服务共享一些资源，例如缓存、数据库等，甚至可以将缓存和数据在物理拓扑上与微服务部署在一个物理机中，
		最大限度的减少网络通信带来的性能损耗，这个称为单元化架构
		2、遗留的整体服务

2、微服务的容错模式：
	1、舱壁隔离模式
		微服务容器分组：比如一些社交网站将名人的自媒体流量全部路由到服务的核心池子中，而将普通用户的流量路由到另外一个服务池子中，有效隔离了普通用户
		和重要用户的负载
		线程池隔离
	2、熔断模式：当服务输入负载迅速增加时，如果没有有效的措施对负载进行熔断，则会使服务迅速被压垮，服务被压垮会导致依赖的服务都被压垮，出现雪崩效应，
	因此，可以通过模拟家庭的电路保险开关，在微服务架构中实现熔断模式
	3、限流模式：针对服务突然上量，我们必须有限流机制，一般会控制访问的并发量，例如每秒允许处理的并发用户数及查询量、请求量等，限流方法：
		计数器：通过原子变量计算单位时间内的访问次数，如果超过某个阈值，则拒绝后续的请求，等到下一个单位时间再重新计数
		令牌桶
		信号量
	4、失效转移模式：若微服务架构中发生了熔断和限流，该如何处理被拒绝的请求呢？
		采用快速失败的策略，直接返回使用方错误，让使用方知道发生了问题并自行决定后续处理
		是否有备份服务，如果有则迅速切换到备份服务
		失败的服务有可能是某台机器有问题，例如OOM问题，可以采用重试策略，但是要求服务提供者的服务实现了幂等性


