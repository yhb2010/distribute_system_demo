1、核心非功能质量指标：
	高性能：运行效率高、性价比高
	可用性：持续可用性、缩短宕机时间、出错恢复、可靠性
	可伸缩性：垂直伸缩、水平伸缩
	可扩展性：可插拔、组件重用
	安全性：数据安全、加密、熔断、防攻击

2、其它非功能质量指标：
	可监控性：快速发现、定位和解决
	可测试性：可灰度、可预览、可mock、可拆解
	鲁棒性：容错性、可恢复性
	可维护性：易于维护、监控、运营和扩展
	可重用性：可移植性、解耦
	易用性：可操作性

3、非功能质量需求的具体指标

	1、应用服务器：是服务的入口，请求流量从这里进入系统、数据库、缓存和消息队列的访问量取决于应用服务器的访问量。对应用服务器的访问量评估至关重要，其
	主要关心每秒请求的峰值及对请求的响应时间等指标
	部署结构：
		负载均衡策略
		高可用策略
		io模型(nio/bio)
		线程池模型
		线程池中的线程数量
		是否多业务混合部署
	容量和性能：
		每天的请求量
		各接口的访问峰值
		平均的请求响应时间
		最大的请求响应时间
		在线的用户量
		请求的大小
		网卡的io流量
		磁盘的io负载
		内容的使用情况
		cpu的使用情况
	其他指标：
		请求的内容是否包含大对象
		gc收集器的选型和配置

	2、数据库：
	部署结构
		复制模型
		失败转移策略
		容灾策略
		归档策略
		读写分离策略
		分库分表策略
		静态数据和半静态数据是否使用缓存
		有没有考虑缓存穿透并压垮数据库的情况
		缓存失效和缓存数据预热策略
	容量和性能相关指标：
		当前的数据容量
		每天的数据增量(预估容量)
		每秒的读峰值
		每秒的写峰值
		每秒的事务量峰值
	其它相关指标
		查询是否走索引
		有没有大数据量的查询和范围查询
		有没有多表关联，关联是否用到索引
		有没有使用悲观锁，是否可以改造成乐观锁，是否可以利用数据库内置行级锁
		事务和一致性级别
		使用的jdbc数据源类型及连接数等配置
		是否开启jdbc诊断日志
		有没有存储过程
		伸缩策略(分区表、自然时间分表、水平分库分表)
		水平分库分表实现方法(客户端、代理、nosql)

	3、缓存：根据应用层的访问量和访问峰值，通过评估热数据占比，计算缓存资源的大小并估算缓存资源的峰值，由此来计算所需缓存资源的数量、部署结构、高可用
	方案等
	部署结构
		复制模型
		失效转移
		持久策略
		淘汰策略
		线程模型
		预热方法
		哈希分片策略
	容量与性能
		缓存内容的大小
		缓存内容的数量
		缓存内容的过期时间
		缓存的数据结构
		每秒的读峰值
		每秒的写峰值
	其他指标
		冷热数据比例
		是否有可能发生缓存穿透
		是否有大对象
		是否使用缓存实现分布式锁
		是否使用缓存支持的脚本(lua)
		是否避免了Race Condition
		缓存分片方法(客户端、代理、集群)

	4、消息队列：根据应用程序的平均访问量和访问峰值，计算出需要消息队列传递的数据量，进而计算出所需的消息队列资源的数量、部署结构、高可用方案等
	部署结构
		复制模型
		失效转移
		持久策略
	容量和性能
		每天平均的数据增量
		消息持久的过期时间
		每秒的读峰值
		每秒的写峰值
		每天消息的大小
		平均延迟
		最大延迟
	其它指标
		消费者线程池模型
		哈希分片策略
		消息的可靠投递
		消费者的处理流程和持久机制
